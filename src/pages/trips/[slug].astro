---
import Layout from "../../layouts/Layout.astro";
import FAQ from "../../components/FAQ.astro";
import Contact from "../../components/Contact.astro";

export const prerender = true;


export async function getStaticPaths() {
  const tripEntries = await import.meta.glob("../../content/trips/*.mdx", {
    eager: true,
  });

  // Extract frontmatter and Content component
  const trips = Object.values(tripEntries).map((mod) => ({
    ...mod.frontmatter,
    Content: mod.default, // Extract MDX content
  }));

  return trips.map((trip) => ({
    params: { slug: trip.slug },
    props: { trip }, // Pass trip data including Content
  }));
}

const { trip } = Astro.props;

if (!trip) {
  throw new Error("Trip not found");
}

// Get the first image from the trip's image array or use the single image
const socialImage = Array.isArray(trip.imgSrc) ? trip.imgSrc[0] : trip.imgSrc;

const seo = {
  title: trip.title + " - Pura Vida Expediciones",
  description: trip.description,
  image: socialImage // Use the trip's first image for social sharing
};
---

<Layout siteName={trip.name} seo={seo}>
  <section class="container mx-auto px-4 py-4">
    <div class="p-6 mt-5 lg:mb-0 lg:mx-4">
      <h1 class="text-4xl font-bold text-center">{trip.name}</h1>
      
      <!-- Image slider for multiple images -->
      {Array.isArray(trip.imgSrc) ? (
        <div class="relative w-full max-w-4xl mx-auto mt-6 overflow-hidden rounded-lg shadow-lg">
          <div class="slider-container relative">
            <div class="slider-wrapper flex transition-transform duration-500">
              {trip.imgSrc.map((src, index) => (
                <div class="slide-item w-full flex-shrink-0">
                  <div class="aspect-ratio-container relative" style="padding-top: 56.25%;">
                    <img
                      src={src}
                      alt={`${trip.name} - Image ${index + 1}`}
                      class="absolute inset-0 w-full h-full object-cover"
                      loading={index === 0 ? "eager" : "lazy"}
                      decoding={index === 0 ? "sync" : "async"}
                    />
                  </div>
                </div>
              ))}
            </div>
            
            <!-- Navigation arrows -->
            <button 
              class="slider-nav prev absolute left-2 top-1/2 transform -translate-y-1/2 bg-black bg-opacity-50 text-white p-2 rounded-full z-10"
              aria-label="Previous slide"
            >
              &#10094;
            </button>
            <button 
              class="slider-nav next absolute right-2 top-1/2 transform -translate-y-1/2 bg-black bg-opacity-50 text-white p-2 rounded-full z-10"
              aria-label="Next slide"
            >
              &#10095;
            </button>
            
            <!-- Dots indicator -->
            <div class="slider-dots absolute bottom-4 left-0 right-0 flex justify-center space-x-2">
              {trip.imgSrc.map((_, index) => (
                <button 
                  class="dot w-3 h-3 rounded-full bg-white bg-opacity-50 hover:bg-opacity-100"
                  data-index={index}
                  aria-label={`Go to slide ${index + 1}`}
                ></button>
              ))}
            </div>
          </div>
        </div>
      ) : (
        <div class="w-full max-w-4xl mx-auto mt-6 rounded-lg shadow-lg overflow-hidden">
          <div class="aspect-ratio-container relative" style="padding-top: 56.25%;">
            <img
              src={trip.imgSrc}
              alt={trip.name}
              class="absolute inset-0 w-full h-full object-cover"
            />
          </div>
        </div>
      )}
      
      <div class="max-w-4xl mx-auto mt-6">
        <article class="prose dark:prose-invert lg:prose-lg prose-img:max-w-4xl mx-auto mt-8">
          <p class="mt-4 text-2xl font-semibold">
            <strong>Dates:</strong>
            {trip.dates}
          </p>
          <p class="mt-2 text-2xl font-semibold">
            <strong>Price:</strong>
            {trip.price}
          </p>

          <h2 class="mt-6 text-2xl font-semibold">Highlights</h2>
          <ul class="mt-2 list-disc list-inside text-lg">
            {trip.highlights.map((highlight) => <li>{highlight}</li>)}
          </ul>

          <!-- Render the MDX content below -->
          <trip.Content />
        </article>
      </div>
    </div>
  </section>

  <FAQ />
  <Contact />
</Layout>

<script>
  // Initialize the slider functionality after the page loads
  document.addEventListener('DOMContentLoaded', () => {
    const sliderContainer = document.querySelector('.slider-container');
    
    if (!sliderContainer) return; // Exit if no slider is present
    
    const sliderWrapper = sliderContainer.querySelector('.slider-wrapper');
    const slides = sliderContainer.querySelectorAll('.slide-item');
    const dots = sliderContainer.querySelectorAll('.dot');
    const prevBtn = sliderContainer.querySelector('.prev');
    const nextBtn = sliderContainer.querySelector('.next');
    
    if (!sliderWrapper || slides.length === 0) return;
    
    let currentIndex = 0;
    const slideWidth = 100; // 100% width for each slide
    
    // Set initial active state
    updateSlider();
    
    // Add event listeners to navigation buttons
    if (prevBtn) {
      prevBtn.addEventListener('click', () => {
        currentIndex = (currentIndex - 1 + slides.length) % slides.length;
        updateSlider();
      });
    }
    
    if (nextBtn) {
      nextBtn.addEventListener('click', () => {
        currentIndex = (currentIndex + 1) % slides.length;
        updateSlider();
      });
    }
    
    // Add event listeners to dots
    dots.forEach((dot, index) => {
      dot.addEventListener('click', () => {
        currentIndex = index;
        updateSlider();
      });
    });
    
    // Update the slider position and active states
    function updateSlider() {
      // Update transform to show current slide
      sliderWrapper.style.transform = `translateX(-${currentIndex * slideWidth}%)`;
      
      // Update active dot
      dots.forEach((dot, index) => {
        if (index === currentIndex) {
          dot.classList.add('bg-opacity-100');
          dot.classList.remove('bg-opacity-50');
        } else {
          dot.classList.add('bg-opacity-50');
          dot.classList.remove('bg-opacity-100');
        }
      });
    }
    
    // Auto-advance the slider every 3 seconds
    let autoAdvance = setInterval(() => {
      currentIndex = (currentIndex + 1) % slides.length;
      updateSlider();
    }, 3000);
    
    // Pause auto-advance when mouse enters the slider
    sliderContainer.addEventListener('mouseenter', () => {
      clearInterval(autoAdvance);
    });
    
    // Resume auto-advance when mouse leaves the slider
    sliderContainer.addEventListener('mouseleave', () => {
      autoAdvance = setInterval(() => {
        currentIndex = (currentIndex + 1) % slides.length;
        updateSlider();
      }, 5000);
    });
  });
</script>
