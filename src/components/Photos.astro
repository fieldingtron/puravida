---
//  https://docs.astro.build/en/reference/modules/astro-content/#getentry
import * as Content from "../content/index.mdx";
//console.log(Content.frontmatter.fotos);
// Define the type for a photo
type Photo = {
  imgSrc: string | string[];
  name: string;
};

// Ensure fotos is typed correctly
const fotos: Photo[] = Content.frontmatter.fotos;
---

<section class="" id="fotos">
  <div class="container mx-auto p-6 lg:mb-0">
    <h1 class="text-4xl font-bold text-center mb-8">Photos</h1>

    <div class="grid grid-cols-1 md:grid-cols-3 lg:grid-cols-6 gap-4">
      {
        fotos?.map &&
          fotos.map((foto, index) => {
            // Support multiple images per photo (array or single)
            const images = Array.isArray(foto.imgSrc) ? foto.imgSrc : [foto.imgSrc];
            return (
              <div class="h-full w-full image-slider" key={`divf${index}`} data-images={JSON.stringify(images)}>
                <a href={images[0]} class="glightbox" data-gallery="gallery">
                  <img
                    src={images[0]}
                    alt={foto.name}
                    key={`fotos${index}`}
                    class="w-full cursor-zoom-in slider-image"
                  />
                </a>
              </div>
            );
          })
      }
    </div>
  </div>
</section>

<script>
  import GLightbox from "glightbox";
  import "glightbox/dist/css/glightbox.css";

  GLightbox({
    selector: ".glightbox",
    touchNavigation: true,
    loop: true,
  });

  // Add slider functionality
  document.addEventListener('DOMContentLoaded', () => {
    const sliders = document.querySelectorAll('.image-slider');
    
    sliders.forEach(slider => {
      const imagesData = slider.getAttribute('data-images');
      if (!imagesData) return;
      
      const images = JSON.parse(imagesData);
      if (!images.length) return;
      
      const imgElement = slider.querySelector('.slider-image') as HTMLImageElement;
      if (!imgElement) return;
      
      let currentIndex = 0;
      let sliderInterval: number | null = null;
      
      // Preload all images
      const preloadImages = () => {
        images.forEach((src: string) => {
          const img = new Image();
          img.src = src;
        });
      };
      
      // Preload images after a short delay
      setTimeout(preloadImages, 100);
      
      // Start slider on hover
      slider.addEventListener('mouseenter', () => {
        if (images.length <= 1) return; // Don't start if only one image
        
        sliderInterval = setInterval(() => {
          currentIndex = (currentIndex + 1) % images.length;
          if (imgElement instanceof HTMLImageElement) {
            imgElement.src = images[currentIndex];
          }
        }, 1000); // Change every 1 second
      });
      
      // Stop slider when mouse leaves
      slider.addEventListener('mouseleave', () => {
        if (sliderInterval) {
          clearInterval(sliderInterval);
          sliderInterval = null;
          
          // Reset to first image
          currentIndex = 0;
          imgElement.src = images[0];
        }
      });
    });
  });
</script>
